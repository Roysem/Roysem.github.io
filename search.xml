<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>面向对象之类与对象</title>
    <url>/2021/07/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="面向对象之类与对象"><a href="#面向对象之类与对象" class="headerlink" title="面向对象之类与对象"></a>面向对象之类与对象</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol>
<li>理解面向对象</li>
<li>掌握类与对象的定义和使用</li>
<li>掌握成员变量和局部变量的区别</li>
</ol>
<h2 id="1-面向对象"><a href="#1-面向对象" class="headerlink" title="1.面向对象"></a>1.面向对象</h2><h3 id="1-1面向对象思想介绍"><a href="#1-1面向对象思想介绍" class="headerlink" title="1.1面向对象思想介绍"></a>1.1面向对象思想介绍</h3><p>java语言是一种面向对象程序设计语言，而面向对象思想是一种程序设计思想，我们在面向对象思想的指引下，使用java语言去设计，开发计算机程序</p>
<p>这里的对象泛指现实中一切事物，每种事物都具备自己的属性和行为。面向对象思想就是讲现实世界中的事物的属性特征，行为特征抽象出来，描述成计算机事件的设计思想</p>
<h3 id="1-2面向对象和面向过程的区别"><a href="#1-2面向对象和面向过程的区别" class="headerlink" title="1.2面向对象和面向过程的区别"></a>1.2面向对象和面向过程的区别</h3><h4 id="1-2-1-什么是面向过程"><a href="#1-2-1-什么是面向过程" class="headerlink" title="1.2.1 什么是面向过程"></a>1.2.1 什么是面向过程</h4><p>在我们去实现某项功能的时候，我们会不自觉的按部就班的罗列出我们要去做的事情，在一步一步的实现出来，这种按照我们罗列的步骤去实现某项功能的过程其实就是面向过程。</p>
<p>总结起来就是：<strong>自顶向下，逐步向下</strong>：</p>
<p>实现步骤：</p>
<ol>
<li><p>将要实现的功能描述为一个开始到结束按部就班的连续的步骤</p>
</li>
<li><p>将这一系列步骤中比较复杂的事情在继续继续细分为若干个子步骤 。以此内推，直到得到想用的结果</p>
</li>
<li><p>程序的主体是函数，一个函数就是一个封装好的功能，可以实现一定的功能，各个步骤有各个函数来完成。从而实现代码的重用和模块化编程</p>
</li>
</ol>
<h4 id="1-2-2什么是面向对象"><a href="#1-2-2什么是面向对象" class="headerlink" title="1.2.2什么是面向对象"></a>1.2.2什么是面向对象</h4><p>所谓面向对象，就是在编程的时候尽可能的去模拟现实世界，按照现实世界的逻辑去处理一个问题，分析现实世界中的逻辑去处理一个问题，分析问题中的逻辑去处理一个问题，分析问题中参与其中的有哪些实体，这些实体应该有什么属性和方法，我们如何去调用这些实体的属性和方法去解决问题。</p>
<p>现实世界中，任何一个操作或者是业务逻辑的实现都需要一个实体来完成，也就是说，实体就是动作的支配者，没有实体，就肯定没有动作发生</p>
<p>当使用面向对象的思想去解决问题时，可分为以下几步</p>
<ol>
<li><p>分析哪些动作是由哪些实体发出的</p>
</li>
<li><p>定义这些实体，为其增加相应的属性和功能</p>
</li>
<li><p>让实体去执行相应的功能或动作</p>
</li>
</ol>
<h4 id="1-2-3举例说明"><a href="#1-2-3举例说明" class="headerlink" title="1.2.3举例说明"></a>1.2.3举例说明</h4><p>洗衣服</p>
<ul>
<li><p>面向过程：把衣服脱下来–&gt;找一个盆 –&gt; 放点洗衣粉 –&gt;加点水 –&gt;浸泡10分钟 –&gt;揉一揉 –&gt;洗衣服 –&gt; 拧干 –&gt;晾起来</p>
</li>
<li><p>面向对象： 把衣服脱下来 –&gt; 打开全自动洗衣机 –&gt;扔衣服 –&gt;按钮–&gt; 晾起来</p>
</li>
</ul>
<p>区别：</p>
<ul>
<li><p>面向过程：强调步骤</p>
</li>
<li><p>面向过程：强调对象，这里的对象就是洗衣机</p>
</li>
</ul>
<h4 id="1-3-4总结"><a href="#1-3-4总结" class="headerlink" title="1.3.4总结"></a>1.3.4总结</h4><ol>
<li><p>面向过程：当要实现一个功能时，需要亲力亲为，处理每个细节</p>
</li>
<li><p>面向过程：当要实现一个功能时，不关心具体的实现步骤，只关心结果，找一个具有该功能的类，帮我呢吧做事</p>
</li>
<li><p>面向对象的思想</p>
<ol>
<li>面向对象是基于面向过程的编程思想</li>
<li>面向过程：强调的是每一个功能的步骤</li>
<li>面向对象：强调的是对象，然后由对象去调用功能</li>
</ol>
</li>
<li><p>面向对象和面向过程都能实现模块化编程，但是面向对象的模块化更深，数据更封闭，也更安全</p>
</li>
<li><p>特点：</p>
<p>面向对象思维是一种更符合我们思考习惯的思想，他可以将复杂的事情简单化，并将我们从执行者变成指挥者。面向对象的语言，包含了三大基本特征：封装，继承，多态</p>
</li>
</ol>
<h3 id="1-3类和对象的引入"><a href="#1-3类和对象的引入" class="headerlink" title="1.3类和对象的引入"></a>1.3类和对象的引入</h3><h4 id="1-3-1什么是类"><a href="#1-3-1什么是类" class="headerlink" title="1.3.1什么是类"></a>1.3.1什么是类</h4><ul>
<li><strong>类：</strong> 是一组具有类似属性和行为的集合。可以看成是一类事物得模板，使用事物得属性特征和行为特征来描述该类事物</li>
<li><strong>属性：</strong> 就是该事物得状态信息</li>
<li><strong>行为：</strong> 就是该事物能够做什么 </li>
</ul>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">举例: 人类</span><br><span class="line">属性：名字，年龄，性别，身高等等。</span><br><span class="line">行为：吃饭，睡觉，工作等等。</span><br></pre></td></tr></table></figure>

<h4 id="1-3-2什么是对象"><a href="#1-3-2什么是对象" class="headerlink" title="1.3.2什么是对象"></a>1.3.2什么是对象</h4><ul>
<li>对象：是一类事物得具体体现。对象是类的一个实例。必然具备该事物的属性和行为。</li>
</ul>
<figure class="highlight tcl"><table><tr><td class="code"><pre><span class="line">属性：张三丰,<span class="number">120</span>，男，<span class="number">175</span></span><br><span class="line">行为：吃饭，睡觉，练武。</span><br></pre></td></tr></table></figure>

<h4 id="1-3-3类与对象的关系"><a href="#1-3-3类与对象的关系" class="headerlink" title="1.3.3类与对象的关系"></a>1.3.3类与对象的关系</h4><ul>
<li>类是对一类事物得描述，是抽象的</li>
<li>对象是一类事物得实例，是具体的</li>
<li>类是对象的模板，对象是类的实体</li>
</ul>
<p>下图中<strong>男孩（boy）</strong>、<strong>女孩（girl）</strong>为<strong>类（class）</strong>，而具体的每个人为该类的<strong>对象（object）：</strong></p>
<p><img src="/2021/07/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/image-20200611144138237.jpg"></p>
<h2 id="2-类与对象"><a href="#2-类与对象" class="headerlink" title="2.类与对象"></a>2.类与对象</h2><p>在java语言中，参与现实世界的类与对象并以面向面向对象的思维进行了语言设计，把一些事物按照类的划分，在以对象的形式进行管理</p>
<h3 id="2-1类的定义"><a href="#2-1类的定义" class="headerlink" title="2.1类的定义"></a>2.1类的定义</h3><p>语法：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">访问权限修饰符 class 类名&#123;</span><br><span class="line">    //成员变量  属性特征</span><br><span class="line">    //成员方法  行为特征</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><strong>定义类：</strong>就是对业务或者现实中某一实实在在的分类物以java语言中的类进行定义并分类管理，参考现实类有属性和行为两个关键特征，所以java中的类也包括属性和行为</li>
<li><strong>访问权限修饰符：</strong>就是java中控制当前类是否可见，被谁可见的关键字，包括有public，protected,default,private。通常类的权限修饰符都为public</li>
<li><strong>class：</strong> 定义java类的关键字</li>
<li><strong>类名：</strong> 就是我们要创建具体的什么类，给取个见名知意的名字</li>
<li><strong>成员变量：</strong> 和以前定义变量几乎是一样的(可以类比现实对象的属性)。<strong>位置发生了改变。在类中，方法外</strong></li>
<li><strong>成员方法：</strong>可以描述该类的所有对象可以有什么行为，以及怎么行动</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  	<span class="comment">// 成员变量</span></span><br><span class="line">  	String username;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">int</span> age; <span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="comment">//学习的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 跑步的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String username,<span class="keyword">int</span> distance)</span> </span>&#123;</span><br><span class="line">       System.out.println(username+<span class="string">&quot; 今天跑了&quot;</span>+distance+<span class="string">&quot;m&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2对象的创建"><a href="#2-2对象的创建" class="headerlink" title="2.2对象的创建"></a>2.2对象的创建</h3><p>java类有了，但还只是一个抽象的概念的东西，如果要使用，必须创造一个个具体的对象。</p>
<p>语法</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">类名 对象名 =new 类名()</span><br></pre></td></tr></table></figure>

<p>使用对象访问类中的成员：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">对象名.成员变量</span><br><span class="line">对象名.成员方法</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建对象格式：类名 对象名 = new 类名();</span></span><br><span class="line">    Student s = <span class="keyword">new</span> Student();</span><br><span class="line">    System.out.println(s); <span class="comment">//com.hopu.classobject.Student@15db9742</span></span><br><span class="line">  &#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>成员变量有默认的初始值</strong></p>
<p>对象创建后，<strong>成员变量有默认的初始值</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>基本类型</td>
<td>整数（byte，short，int，long）</td>
<td>0</td>
</tr>
<tr>
<td></td>
<td>浮点数（float，double）</td>
<td>0.0</td>
</tr>
<tr>
<td></td>
<td>字符（char）</td>
<td>‘\u0000’</td>
</tr>
<tr>
<td></td>
<td>布尔（boolean）</td>
<td>false</td>
</tr>
<tr>
<td>引用类型</td>
<td>数组，类，接口</td>
<td>null</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	    <span class="comment">// 创建对象格式：类名 对象名 = new 类名();</span></span><br><span class="line">	    Student s = <span class="keyword">new</span> Student();</span><br><span class="line">	    System.out.println(s); <span class="comment">//com.hopu.classobject.Student@15db9742</span></span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 直接输出成员变量值</span></span><br><span class="line">	    System.out.println(<span class="string">&quot;姓名：&quot;</span>+s.username); <span class="comment">//null</span></span><br><span class="line">	    System.out.println(<span class="string">&quot;年龄：&quot;</span>+s.age); <span class="comment">//0</span></span><br><span class="line">	    System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">	    <span class="comment">//给成员变量赋值</span></span><br><span class="line">	    s.username = <span class="string">&quot;佐佐木希&quot;</span>;</span><br><span class="line">	    s.age = <span class="number">32</span>;</span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 再次输出成员变量的值</span></span><br><span class="line">	    System.out.println(<span class="string">&quot;姓名：&quot;</span>+s.username); <span class="comment">//佐佐木希</span></span><br><span class="line">	    System.out.println(<span class="string">&quot;年龄：&quot;</span>+s.age); <span class="comment">//32</span></span><br><span class="line">	    System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 调用成员方法</span></span><br><span class="line">	    s.study(); <span class="comment">// &quot;好好学习，天天向上&quot;</span></span><br><span class="line">	    s.run(<span class="string">&quot;tom&quot;</span>,<span class="number">123</span>); <span class="comment">// 跑步</span></span><br><span class="line">	  &#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3对象内存分析"><a href="#2-3对象内存分析" class="headerlink" title="2.3对象内存分析"></a>2.3对象内存分析</h3><h4 id="2-3-1一个对象内存图："><a href="#2-3-1一个对象内存图：" class="headerlink" title="2.3.1一个对象内存图："></a>2.3.1一个对象内存图：</h4><p><img src="/2021/07/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/image-20210720101908076.jpg"></p>
<p>说明：</p>
<ul>
<li><p>初始化，方法区里面有phone.class方法中的call 方法 ，main()方法在方法区中</p>
</li>
<li><p>执行main方法，将main方法压入栈中</p>
</li>
<li><p>new phone()  ,对象实体化，new phone() 进入堆中，栈中的Phone one存储 对象实体化的地址，同时new Phone中的成员变量有初始值，初始方法的值是方法在堆中的地址</p>
</li>
<li><p>给属性赋值后，输出</p>
</li>
<li><p>在依次出栈</p>
</li>
</ul>
<h4 id="2-3-2两个对象内存图"><a href="#2-3-2两个对象内存图" class="headerlink" title="2.3.2两个对象内存图"></a>2.3.2两个对象内存图</h4><p><img src="/2021/07/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/image-20210720104040717.jpg"></p>
<p><strong>说明：</strong></p>
<p>Phone one 存储的是Phone对象实体化在堆中的地址</p>
<p>Phone 对象再次被实体化时，会在堆里面再次创建一个对象，two的值为这个对象的地址</p>
<h4 id="2-3-3-两个对象指向相同的内存"><a href="#2-3-3-两个对象指向相同的内存" class="headerlink" title="2.3.3  两个对象指向相同的内存"></a>2.3.3  两个对象指向相同的内存</h4><p><img src="/2021/07/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/image-20210720112301880.jpg"></p>
<p>说明：Phone two =one;    把one值(new Phone()的地址)赋值给two中，两个对象同时指向同一个堆内存的地址，所以改变two对象中的属性值会影响one对象的属性值。</p>
<h3 id="2-4成员变量与局部变量"><a href="#2-4成员变量与局部变量" class="headerlink" title="2.4成员变量与局部变量"></a>2.4成员变量与局部变量</h3><p>java中变量根据定义位置的不同，我们给变量起了不同的名字</p>
<p><img src="/2021/07/20/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/image-20200611154936663.jpg"></p>
<p><strong>说明</strong></p>
<ul>
<li><p>在类的位置不同 <!--重点--></p>
<ul>
<li>成员变量：类中，方法外</li>
<li>局部变量：方法中或者方法声明上(形式参数)</li>
</ul>
</li>
<li><p>作用范围不一样  <!--重点--></p>
<ul>
<li><p>成员变量：类中</p>
</li>
<li><p>局部变量：方法中</p>
</li>
</ul>
</li>
<li><p>初始化值不同 <!--重点--></p>
<ul>
<li>成员变量：有默认值</li>
<li>局部变量：没有默认值。必须先定义，赋值，最后使用</li>
</ul>
</li>
<li><p>在内存中的位置不同</p>
<ul>
<li>成员变量：堆内存</li>
<li>局部变量：栈内存</li>
</ul>
</li>
<li><p>生命周期不同</p>
<ul>
<li>成员变量 随着对象的创建而存在，随着对象的消失而消失</li>
<li>随着方法的调用而存在，随着方法的调用完毕而消失</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java基础</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
</search>
